
// Revenue generated by  departure_station and arrivale station 
SELECT 
    departure_station,
    ARRIVAL_DESTINATION,
    ROUND(AVG(price), 3) AS average_price
FROM 
    DEMO_UK.CONSUMPTION_SCHEMA.CONSUMPTION_TABLE
GROUP BY
    departure_station,
    ARRIVAL_DESTINATION
ORDER BY 
    average_price DESC
LIMIT 5

// Revenue generated by  ticket type 
SELECT 
    ticket_type,
    AVG(price) AS average_price
FROM   
    DEMO_UK.CONSUMPTION_SCHEMA.CONSUMPTION_TABLE
GROUP BY
    ticket_type;

// Revenue generated by payment method  
SELECT 
    PAYMENT_METHOD,
    AVG(price) AS average_price
FROM   
    DEMO_UK.CONSUMPTION_SCHEMA.CONSUMPTION_TABLE
GROUP BY
    PAYMENT_METHOD;
	
// Identify the most and least profitable routes.

WITH max_min_price AS (
    SELECT 
        departure_station,
        ARRIVAL_DESTINATION,
        sum(price) AS average_price
    FROM 
        DEMO_UK.CONSUMPTION_SCHEMA.CONSUMPTION_TABLE
    GROUP BY
        departure_station,
        ARRIVAL_DESTINATION
)
SELECT 
    max_min_price.departure_station,
    max_min_price.ARRIVAL_DESTINATION,
    MAX(max_min_price.average_price) AS max_average_price,
    MIN(max_min_price.average_price) AS min_average_price
FROM 
    max_min_price
GROUP BY 
    max_min_price.departure_station,
    max_min_price.ARRIVAL_DESTINATION

    
//trends in ticket pricing and how they correlate with purchase dates.
SELECT	
	DATE_OF_PURCHASE
	AVG(PRICE) AS average_price
FROM
	 DEMO_UK.CONSUMPTION_SCHEMA.CONSUMPTION_TABLE
 GROUP BY 
	DATE_OF_PURCHASE
	
// PRICE OF TICKET BY DAY
WITH day_of_week AS (
    SELECT 
        DAYOFWEEK(DATE_OF_PURCHASE) AS day,
        AVG(price) AS average_price
    FROM DEMO_UK.CONSUMPTION_SCHEMA.CONSUMPTION_TABLE
    GROUP BY day
    ORDER BY average_price DESC
)
SELECT 
    CASE 
        WHEN day_of_week.day = 1 THEN 'Sunday'
        WHEN day_of_week.day = 2 THEN 'Monday'
        WHEN day_of_week.day = 3 THEN 'Tuesday'
        WHEN day_of_week.day = 4 THEN 'Wednesday'
        WHEN day_of_week.day = 5 THEN 'Thursday'
        WHEN day_of_week.day = 6 THEN 'Friday'
        WHEN day_of_week.day = 0 THEN 'Saturday'
        ELSE 'Unknown'
    END AS day_of_week_name,
   
    day_of_week.average_price
FROM day_of_week;

// time or purchase  with price of the ticket with the higest price       
WITH day_of_week AS (
    SELECT 
        DAYOFWEEK(DATE_OF_PURCHASE) AS day,
        HOUR(TIME_OF_PURCHASE) AS hour_of_purchase, 
        AVG(price) AS average_price
    FROM DEMO_UK.CONSUMPTION_SCHEMA.CONSUMPTION_TABLE
    GROUP BY day, hour_of_purchase
    ORDER BY average_price DESC
),
time_of_purchase AS (
    SELECT 
        CASE 
            WHEN day_of_week.day = 1 THEN 'Sunday'
            WHEN day_of_week.day = 2 THEN 'Monday'
            WHEN day_of_week.day = 3 THEN 'Tuesday'
            WHEN day_of_week.day = 4 THEN 'Wednesday'
            WHEN day_of_week.day = 5 THEN 'Thursday'
            WHEN day_of_week.day = 6 THEN 'Friday'
            WHEN day_of_week.day = 7 THEN 'Saturday'
            ELSE 'Unknown'
        END AS day_of_week_name,
        day_of_week.hour_of_purchase,
        day_of_week.average_price
    FROM day_of_week
    LIMIT 10
)
SELECT 
    time_of_purchase.day_of_week_name,
    time_of_purchase.average_price,
    CASE
        WHEN time_of_purchase.hour_of_purchase IN (6, 7, 8, 9, 10) THEN 'Morning'
        WHEN time_of_purchase.hour_of_purchase IN (11, 12, 13, 14, 15, 16) THEN 'Afternoon'
        WHEN time_of_purchase.hour_of_purchase IN (17, 18, 19, 20, 21, 22, 23) THEN 'Evening'
        ELSE 'Unknown'
    END AS time_of_purchase_period
FROM 
    time_of_purchase;

	



